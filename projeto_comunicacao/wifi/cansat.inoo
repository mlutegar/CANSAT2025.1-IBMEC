#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <DHT.h>

#define DHT11PIN 6
#define DHTTYPE DHT11
DHT dht(DHT11PIN, DHTTYPE);

RF24 radio(9, 8); 
const byte address[6] = "00001";  

struct DataPacket {
  int packetNumber;
  int messageNumber;
  float temperature;
  float humidity;
};

// Variáveis para controlar o programa
int packetNumber = 0;
int totalMessages = 0;
int currentMessage = 0;
float distancia = 0.0;  // Nova variável para armazenar a distância
bool configReady = false;
unsigned long previousMillis = 0;
const unsigned long delayTime = 1;  // Delay de 1ms entre mensagens

void setup() {
  Serial.begin(9600);
  radio.begin();
  dht.begin();
  radio.openWritingPipe(address);
  radio.setPALevel(RF24_PA_MIN);
  radio.stopListening();

  packetNumber = 1;       // Exemplo: pacote 1
  totalMessages = 10000;     // Exemplo: 10 mensagens por ciclo
  distancia = 5.0;        // Exemplo: 5 metros

  currentMessage = 0;
  configReady = true;

  Serial.println("Transmissor nRF24L01 iniciado!");
  Serial.println("\n--- INICIANDO TRANSMISSÃO ---");
  Serial.println("Pacote: " + String(packetNumber) +
                 " | Total de mensagens: " + String(totalMessages) +
                 " | Distância: " + String(distancia) + "m");
  previousMillis = millis();
}

void loop() {
  if (configReady) {
    unsigned long currentMillis = millis();
    
    if (currentMillis - previousMillis >= delayTime && currentMessage < totalMessages) {
      previousMillis = currentMillis;    
      currentMessage++;

      float humidity = dht.readHumidity();
      float temperature = dht.readTemperature();

      if (isnan(temperature) || isnan(humidity)) {
        Serial.println("Falha na leitura do sensor DHT11!");
        return;
      }
      
      DataPacket dataPacket;
      dataPacket.packetNumber = packetNumber;
      dataPacket.messageNumber = currentMessage;

      // Ler sensor DHT11
      dataPacket.temperature = humidity;
      dataPacket.humidity = temperature;

      unsigned long micro = micros();
      
      // Adicionar distância na mensagem
      String messageContent = String(dataPacket.temperature) + "," + String(dataPacket.humidity);
      
      char message[50];
      messageContent.toCharArray(message, sizeof(message));
      bool success = radio.write(&message, sizeof(message));
      
      Serial.print("Temp: ");
      Serial.print(dataPacket.temperature);
      Serial.print("°C | Umidade: ");
      Serial.println(dataPacket.humidity);
      
      if (currentMessage >= totalMessages) {
        Serial.println("\n--- TRANSMISSÃO CONCLUÍDA ---");
        Serial.println("Pacote " + String(packetNumber) +
                    " enviado com " + String(totalMessages) +
                    " mensagens a " + String(distancia) + "m");
        currentMessage = 0; 
      }
    }
  } else if (Serial.available()) {
    Serial.read();
  }
}
